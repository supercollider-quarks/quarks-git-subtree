CLASS:: BeatSched
summary:: just in time scheduler utility
categories:: Scheduling, Libraries>crucial>Scheduling
related:: Classes/OSCSched

DESCRIPTION::

Functions can be scheduled for execution using relative seconds, relative beats, absolute seconds or absolute beats.

BeatSched has an epoch — a moment in time for the first downbeat — so functions may be scheduled to happen at a specific beat in the future relative to the beat epoch.

This class uses TempoClock for scheduling, and has some overlap of capabilities with that.  What TempoClock does not have is any concept of what beat it is right now, only of scheduling some number of relative beats in the future.

The TempoClock class is used to specify what the tempo is, and is used for all beat <-> second calculations. The default global TempoClock object is used, or you can use a specific TempoClock instance.

Setting the tempo is best done through Tempo.  If using a custom (non global) TempoClock then you need to use a custom Tempo that uses that custom TempoClock.

There is a default (global) BeatSched that can be addressed through class methods.  It uses the SystemClock and the default global TempoClock.  You may also create individual instances that maintain their own scheduling queues, tempii, and time epochs.

The simplest usage just uses the global class BeatSched which uses the global Tempo and global TempoClock.

If using BeatSched instances you can clear the queue, only affecting your own events.  If using the global BeatSched class, clearing the queue will affect everybody that also uses the global object.

All of these methods exist as both

	class (the default global scheduler)
		eg.
		BeatSched.tsched(seconds,function)

	and instance methods (a specific scheduler).
		eg.
		beatSched = BeatSched.new;
		beatSched.tsched(seconds,function)


code::
b = BeatSched.new;

b.qsched(4.0,{ "hello".postln; });

b.qsched(4.0,{ "hello".postln; });

// post current beat, return nil to not resched task
b.qsched(4.0,{ b.beat.postln; nil });

// set the beat to 0 right now
b.beat = 0;
b.qsched(4.0,{ b.beat.postln; nil });

b.time; // since the app started

b.time = 0.0; // reset the time

b.time;

b.beat; // the tempo is determined by the tempoClock

TempoClock.default.tempo = 2;
b.beat.postln;
TempoClock.default.tempo = 1;
b.beat.postln;

b.time = 0.0;
b.tschedAbs(4.0,{ "4 seconds absolute time".postln; });
b.tschedAbs(2.0,{ "2 seconds absolute time".postln; });


b.xsched(4.0, { "4 beats later".postln });
// cancels previous xsched
b.xsched(2.0, { "2 beats later".postln });
::

CLASSMETHODS::

METHOD:: global



METHOD:: new


argument:: clock


argument:: tempo


argument:: tempoClock



METHOD:: initClass



METHOD:: xblock
blocks any and all pending x-scheduled messages.


METHOD:: time
get the scheduler's time

argument:: seconds



METHOD:: beat
get the scheduler's current beat
set the scheduler's current beat.
this is also used to start a "song":  zero the beat, and all absolute times
previously scheduled events will be unpredictable

argument:: beat



METHOD:: clear
 clear all scheduled events.


METHOD:: deltaTillNext
returns the number of beats untiil the next quantizeDivision.
 	4.0 means the next even bar
 	16.0 means the next 4 bar cycle
 	0.25 means the next 16th note

argument:: quantize



METHOD:: tdeltaTillNext
returns the number of seconds untiil the next beat quantizeDivision.
 	4.0 means the next even bar
 	16.0 means the next 4 bar cycle
 	0.25 means the next 16th note

argument:: quantize



METHOD:: tsched
	time based scheduling
	delta is specified in seconds

argument:: seconds


argument:: function


METHOD:: xtsched
	exclusive time based schedule
	any previous messages scheduling using xtsched, xsched or xqsched will
	be cancelled. this is incredibly useful in situations where several messages
	might be sent and you only want the last one to be used as the final answer.
	example:  a monkey is hitting many buttons, changing his mind about which
	sound to play starting at the next measure. this would result in many messages being stacked up all
	at the same time, and the server would choke trying to execute them all.
	so the x-methods are a kind of enforced monophony.
	another example:  a monophonic sequence plays successive notes, all using xsched,
	you then switch to a different sequence.  	you don't want the note that was
	scheduled from the previous sequence to happen.  	using one of the x-methods,
	you don't have to worry about cancelling it, the old notes will be cleared when new ones
	are scheduled. (actually it just ignores them when they come due)

argument:: seconds


argument:: function



METHOD:: sched
delta specified in beats

argument:: beats


argument:: function



METHOD:: xsched
exclusive, delta specified in beats

argument:: beats


argument:: function



METHOD:: qsched
    function will execute at the next division based on quantize value:
 	4.0 means the next start of a bar
 	16.0 means the next 4 bar cycle
 	1.0 means the next down beat
 	0.25 means the next 16th note
 	etc
        or immediately if you happen to be exactly on a division.

argument:: quantize


argument:: function



METHOD:: xqsched
exclusive quantized beat based scheduling

argument:: quantize


argument:: function



METHOD:: tschedAbs
will happen at the time specified in seconds

argument:: time


argument:: function



METHOD:: xtschedAbs


argument:: time


argument:: function



METHOD:: schedAbs
will happen at the beat specified.

argument:: beat


argument:: function




INSTANCEMETHODS::

METHOD:: tempo



METHOD:: tempoClock



METHOD:: init



METHOD:: xblock



METHOD:: time


argument:: seconds



METHOD:: beat


argument:: beat



METHOD:: clear



METHOD:: deltaTillNext


argument:: quantize



METHOD:: tdeltaTillNext


argument:: quantize



METHOD:: tsched


argument:: seconds


argument:: function



METHOD:: xtsched


argument:: seconds


argument:: function



METHOD:: sched


argument:: beats


argument:: function



METHOD:: xsched


argument:: beats


argument:: function



METHOD:: qsched


argument:: quantize


argument:: function



METHOD:: xqsched


argument:: quantize


argument:: function



METHOD:: tschedAbs


argument:: time


argument:: function



METHOD:: xtschedAbs


argument:: time


argument:: function



METHOD:: schedAbs


argument:: beat


argument:: function



METHOD:: tschedAbsNext



EXAMPLES::


A little rounding error

code::
(
TempoClock.default.tempo = 120 / 60.0;
d = Routine({
                20.do({
                	var t;
                   t = BeatSched.global.tdeltaTillNext(4.0);
                   t.postln;
				t.wait;
                });
        });
        SystemClock.play(d);
)
::


at 5206.432346276  we ask for deltaTillNext 4
[ 5204, 4, 5206.432346276 ]
1.5676537239997

that would be
5206.432346276 + 1.5676537239997
// at 5208
5208


// but when the scheded event comes due:
[ 5204, 4, 5207.999072862 ]
0.00092713799949706

its appears to be slightly ahead of schedule, due
to rounding errors in the several math ops that have happened.

so the right answer is 0.00092713799949706
as far as BeatSched is concerned.

but if you try to loop like this, you will suffer from rounding errors.

mostly you would never set up a loop like this, mostly
you just want to know when the next even beat is so you can get your groove on.


code::
Tempo.bpm_(120);
d = Routine({
	"wait for the downbeat...".postln;
	OSCSched.global.tdeltaTillNext(4.0).wait;

      32.do({ arg i;
           [i,BeatSched.beat].postln;
           Tempo.beats2secs(1.0).wait;
      });
 });
SystemClock.play(d);
::

