CLASS:: RedAGrain
SUMMARY:: granular synthesis with audiorate control
CATEGORIES:: Red>redGrain
RELATED:: Classes/RedBuffer, Classes/RedGrain, Classes/RedGrain2, Classes/RedGrainController, Classes/RedKGrain

DESCRIPTION::
Server side granulator that is controlled with audiorate busses. Based on link::Classes/TGrains::.


CLASSMETHODS::

METHOD:: new
Create granulator (stereo only for now)

ARGUMENT:: server
If code::nil:: then the default server will be used.


INSTANCEMETHODS::

PRIVATE:: initRedXGrain, prSynthName

METHOD:: start
starts the granulator with fade in of attackTime seconds

METHOD:: stop
stops the granulator with fade out of releaseTime seconds

METHOD:: free
stop and free internal busses

METHOD:: synth
the main granulator

METHOD:: trigBus
.ar control bus for triggering grains

METHOD:: bufBus
.ar control bus for selecting which buffer to get the grain source audio from

METHOD:: rateBus
.ar control bus for grain playback rate

METHOD:: posBus
.ar control bus for position in source buffer (in percent. 1.0= end of buffer)

METHOD:: durBus
.ar control bus for grain duration (in seconds)

METHOD:: panBus
.ar control bus for grain panning (-1 to 1)

METHOD:: ampBus
.ar control bus for grain amplitude


EXAMPLES::

CODE::
s.boot;

//-- prepare some buffers
~length= 1;		//segment lengths in seconds - should be the same for positions to scan correctly
~b1= RedBuffer(s, Platform.resourceDir +/+ "sounds/a11wlk01.wav", 0.1, ~length);
~b2= RedBuffer(s, Platform.resourceDir +/+ "sounds/a11wlk01.wav", 0.3, ~length);
~b3= RedBuffer(s, Platform.resourceDir +/+ "sounds/a11wlk01.wav", 0.5, ~length);

//-- create and start the granulator object
r= RedAGrain(s);
r.start;

//again note that all lfo synths must send audiorate
//and be careful to free lfo synths before creating new ones - to not loose handle

//-- init lfo synth
(
//create lfo synth for trigger - here 30 hz
a= SynthDef("trig", {Out.ar(r.trigBus.index, Impulse.ar(30))}).play;
//create lfo synth for bufnum - static at ~b1 bufnum
b= SynthDef("buf", {Out.ar(r.bufBus.index, DC.ar(~b1.bufnum))}).play;
//create lfo synth for rate - slowly rising
c= SynthDef("rate", {Out.ar(r.rateBus.index, LFSaw.ar(0.1, 0, 0.1, 1))}).play;
//create lfo synth for position - static at 0
d= SynthDef("pos", {Out.ar(r.posBus.index, DC.ar(0))}).play;
//create lfo synth for duration - slow drunk walk
e= SynthDef("dur", {Out.ar(r.durBus.index, LFNoise2.ar(1, 0.1, 0.11))}).play;
//create lfo synth for amplitude control - static at 0.4
f= SynthDef("pan", {Out.ar(r.panBus.index, DC.ar(0.4))}).play;
//create lfo synth for amplitude control - static at 0.4
g= SynthDef("amp", {Out.ar(r.ampBus.index, DC.ar(0.4))}).play;
)


//-- trigBus
//change trigger control lfo to another dusty one
a.free;
a= SynthDef("trig", {Out.ar(r.trigBus.index, Dust.ar(10))}).play;

//change to static fast trigger
a.free;
a= SynthDef("trig", {Out.ar(r.trigBus.index, Impulse.ar(140))}).play;

//let mouseX control trigger rate
a.free;
a= SynthDef("trig", {Out.ar(r.trigBus.index, Impulse.ar(MouseX.kr(2, 200)))}).play;


//-- bufBus
//change buffer to ~b2
b.free;
b= SynthDef("buf", {Out.ar(r.bufBus.index, DC.ar(~b2.bufnum))}).play;

//play from the 3 buffers in cycle
b.free;
b= SynthDef("buf", {Out.ar(r.bufBus.index, Demand.ar(Impulse.ar(4), 0, Dseq([~b1.bufnum, ~b2.bufnum, ~b3.bufnum], inf)))}).play;

//quick drunk walk change buffers (little bit dangerous if ~b1-3 not following each other here)
b.free;
b= SynthDef("buf", {Out.ar(r.bufBus.index, Demand.ar(Impulse.ar(100), 0, Dbrown(~b1.bufnum, ~b3.bufnum, 1, inf)))}).play;

//slow back and forth change of buffers - 4 changes per segment length
b.free;
b= SynthDef("buf", {Out.ar(r.bufBus.index, Demand.ar(Impulse.ar(~length.reciprocal*4), 0, Dseq([~b1.bufnum, ~b2.bufnum, ~b3.bufnum, ~b2.bufnum], inf)))}).play;

//faster back and forth change of buffers - 32 changes per segment length
b.free;
b= SynthDef("buf", {Out.ar(r.bufBus.index, Demand.ar(Impulse.ar(~length.reciprocal*32), 0, Dseq([~b1.bufnum, ~b2.bufnum, ~b3.bufnum, ~b2.bufnum], inf)))}).play;


//-- rateBus
//varying rate with drunk walk
c.free;
c= SynthDef("rate", {Out.ar(r.rateBus.index, LFNoise2.ar(1, 0.3, 1))}).play;

//halfspeed backwards static rate
c.free;
c= SynthDef("rate", {Out.ar(r.rateBus.index, DC.ar(-0.5))}).play;

//falling rate during segment length
c.free;
c= SynthDef("rate", {Out.ar(r.rateBus.index, LFSaw.ar(~length.reciprocal.neg, 0, 0.1, 1))}).play;


//-- posBus
//set position to normal speed scanning forwards
d.free;
d= SynthDef("pos", {Out.ar(r.posBus.index, LFSaw.ar(~length.reciprocal, 0, 0.5, 0.5))}).play;

//position slow scanning forwards
d.free;
d= SynthDef("pos", {Out.ar(r.posBus.index, LFSaw.ar(0.4, 0, 0.5, 0.5))}).play;

//position slow scanning backwards
d.free;
d= SynthDef("pos", {Out.ar(r.posBus.index, LFSaw.ar(-0.5, 0, 0.5, 0.5))}).play;

//mouseX controls position
d.free;
d= SynthDef("pos", {Out.ar(r.posBus.index, K2A.ar(MouseX.kr(0, 1, lag:1)))}).play;

//mouseXY control + a little random
d.free;
d= SynthDef("pos", {Out.ar(r.posBus.index, LFNoise2.ar(120, MouseY.kr(0, 0.1), MouseX.kr(0, 1, lag:1)))}).play;

//back to static position
d.free;
d= SynthDef("pos", {Out.ar(r.posBus.index, DC.ar(0))}).play;


//-- durBus
//change to short static duration
e.free;
e= SynthDef("dur", {Out.ar(r.durBus.index, DC.ar(0.02))}).play;

//random duration between 0.01 and 0.41
e.free;
e= SynthDef("dur", {Out.ar(r.durBus.index, LFNoise0.ar(4, 0.2, 0.21))}).play;

//mouseY controls duration
e.free;
e= SynthDef("dur", {Out.ar(r.durBus.index, K2A.ar(MouseY.kr(0, 0.6)))}).play;

//slow phasor control duration
e.free;
e= SynthDef("dur", {Out.ar(r.durBus.index, LFSaw.ar(0.4, 0, 0.04, 0.05))}).play;


//-- panBus
//sine panning
f.free;
f= SynthDef("pan", {Out.ar(r.panBus.index, SinOsc.ar(4))}).play;

//slow random panning
f.free;
f= SynthDef("pan", {Out.ar(r.panBus.index, LFNoise2.ar(0.3))}).play;

//random discrete panning at fast rate
f.free;
f= SynthDef("pan", {Out.ar(r.panBus.index, Demand.ar(Impulse.ar(100), 0, Dseq([-0.9, 0, 0.9], inf)))}).play;


//-- ampBus
//fast jumps in amplitude
g.free;
g= SynthDef("amp", {Out.ar(r.ampBus.index, LFNoise0.ar(40, 0.2, 0.2).max(0))}).play;

//fade out during each segment
g.free;
g= SynthDef("amp", {Out.ar(r.ampBus.index, LFSaw.ar(~length.reciprocal.neg, 0, 0.5, 0.5))}).play;


//-- more complex example
[a, b, c, d, e, f, g].do(_.free);
(
//master trigger controlling the other lfos
a= SynthDef("trig", {Out.ar(r.trigBus.index, Impulse.ar(LFNoise1.ar(0.5, 10, 80)))}).play;
b= SynthDef("buf", {Out.ar(r.bufBus.index, DC.ar(~b1.bufnum))}).play;
c= SynthDef("rate", {Out.ar(r.rateBus.index, Demand.ar(InFeedback.ar(r.trigBus.index), 0, Dseq([1, 2], inf)))}).play;
d= SynthDef("pos", {Out.ar(r.posBus.index, Demand.ar(InFeedback.ar(r.trigBus.index), 0, Dseq([Dseries(0, 0.002, 900)], inf)))}).play;
e= SynthDef("dur", {Out.ar(r.durBus.index, Demand.ar(InFeedback.ar(r.trigBus.index), 0, Dseq([Dseries(0.01, 0.001, 100)], inf)))}).play;
f= SynthDef("pan", {Out.ar(r.panBus.index, Demand.ar(InFeedback.ar(r.trigBus.index), 0, Dseq([-0.9, 0, 0.9], inf)))}).play;
g= SynthDef("amp", {Out.ar(r.ampBus.index, DC.ar(0.4))}).play;
)


//-- clean up and stop
[a, b, c, d, e, f, g, ~b1, ~b2, ~b3].do(_.free);
r.free
::
