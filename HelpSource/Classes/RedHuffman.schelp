CLASS:: RedHuffman
SUMMARY:: huffman coding
CATEGORIES:: Red>redTools
RELATED:: Classes/RedBase64, Classes/RedLZ77, Classes/RedLZ78, Classes/RedLZSS, Classes/RedLZW, Classes/RedRLE

DESCRIPTION::
The principle is emphasis:: "to use fewer bits for more frequently occurring character" ::.

See http://www.cs.duke.edu/csed/poop/huff/info/

NOTE::
Works with link::Classes/Integer::, link::Classes/Float:: and link::Classes/Symbol::. Can also take a link::Classes/String:: instead of an link::Classes/Array::.
::

CLASSMETHODS::

PRIVATE:: prBuildDict, prTakeMinimum, prRebuildTree

METHOD:: compress
Compresses an array into a string of binary numbers. Creates a link::#*tree:: and a link::#*dict:: as well.

METHOD:: decompress
Decompresses a binary string into an array. Make sure you use the right link::#*tree:: and link::#*dict:: as generated by the compress method.

METHOD:: binaryStringToBytes
Converts a binary string into 8-bit bytes. Up to 7 zeros might be padded automatically at the end. The number of zeros is stored in link::#*pad::. link::#*pad:: is semi-private and used when converting back to bytes.

METHOD:: bytesToBinaryString
Converts an array of 8-bit bytes into a binary string.

METHOD:: pad
Semi-private counter for number of padded zeros. Set by link::#*binaryStringToBytes:: and read by link::#*bytesToBinaryString::.

METHOD:: tree
Multi-level array with values as leaves.

METHOD:: dict
Look-up dictionary with values and binary strings.

EXAMPLES::

CODE::
a= "000001111233333333".ascii;
b= RedHuffman.compress(a);
RedHuffman.binaryStringToBytes(b).size/a.size;	//compressed to 28%
c= RedHuffman.decompress(b);
a==c;


a= "streets are stone stars are not".ascii;
b= RedHuffman.compress(a);
RedHuffman.binaryStringToBytes(b).size/a.size;	//compressed to 39%
c= RedHuffman.decompress(b);
a==c


a= "go go gophers".ascii;
b= RedHuffman.compress(a);
RedHuffman.tree;				//current tree
RedHuffman.dict;				//current dict
c= RedHuffman.decompress(b);
a==c


a= "go go gophers";				//or with a string argument
b= RedHuffman.compress(a);
RedHuffman.tree;				//current tree
RedHuffman.dict;				//current dict
c= RedHuffman.decompress(b);
a==c.join


a= [0, 0, 0, 0, 1.5, 1.5, 1.5, \abc, \abc, \testing];
b= RedHuffman.compress(a);
RedHuffman.tree;				//current tree
RedHuffman.dict;				//current dict
c= RedHuffman.binaryStringToBytes(b);		//this is the data you can save in a file
c.size/a.size;					//30% smaller than the original
d= RedHuffman.bytesToBinaryString(c);
e= RedHuffman.decompress(d);			//here is the data expanded again
a==e


a= "Man is distinguished, not only by his reason, but by this singular passion from other animals, which is a lust of the mind, that by a perseverance of delight in the continued and indefatigable generation of knowledge, exceeds the short vehemence of any carnal pleasure.".ascii;
b= RedHuffman.compress(a);
c= RedHuffman.binaryStringToBytes(b);
c.size/a.size;		//53% smaller than the original
d= RedHuffman.bytesToBinaryString(c);
e= RedHuffman.decompress(d);
e==a
::
