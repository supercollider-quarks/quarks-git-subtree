TITLE:: DataCollector
summary:: collects Data with timestamps
categories:: Logging


DESCRIPTION::
DataCollector collects data with timestamps, as it is added to the collection. It provides backup mechanism to recover from stored data. The data can be used for realtime or offline analysis in the same or in a later session. inspired by MemoryRecorder developed by Alberto de Campo and Marije Baalman for the Institute of Predictive Sonobotanics


CLASSMETHODS::

METHOD:: new
Creates a new data collector.

ARGUMENT:: name
A name for the collector.

ARGUMENT:: collection
Optional argument to provide another DataCollector which is then added to this new one.

returns:: a DataCollector

METHOD:: fromFile
Load a stored DataCollector from file

ARGUMENT:: path
The full path of the file to load from.

returns:: a DataCollector

METHOD:: makeBackupFolder
Creates the backup folder for storing DataCollectors to.

METHOD:: initialized
Indicates whether or not the backup folder has been created.

METHOD:: folder
The path to the backupfolder.

returns:: a String


METHOD:: makeList
Convenience method to create a SortedList sorted by date

returns:: a SortedList



INSTANCEMETHODS::
private:: init, storeArgs

METHOD:: addData
Add data to the collection.

ARGUMENT:: data
The data to be added.

ARGUMENT:: date
The time stamp of the data. If non is given, one is created.

ARGUMENT:: overwrite
Whether or not to overwrite a previous entry with the same datestamp. Default is true.

returns:: the date time stamp (so it can be used for adding metadata)

METHOD:: addMetaData
Add metadata to the collection. This can be for example higher level data or a comment.

ARGUMENT:: mdata
The metadata to add.

ARGUMENT:: date
The time stamp.


METHOD:: at
Access an trace in the collection.

ARGUMENT:: index
The index of the trace to access.

returns:: an Event of the trace requested.


METHOD:: getLast
Get the last N entries from the collection

ARGUMENT:: howmany
The number of entries to get.

returns:: a SortedList of entries.

METHOD:: addTrace
Adds a trace of data to the collection. Called by addData or addMetaData.

ARGUMENT:: trace
The trace to add.

ARGUMENT:: overwrite
Whether or not to overwrite an existing trace.

returns:: the date stamp of the trace.

subsection:: Backup functionality

METHOD:: backup
Create a backup in a file with an autogenerated filename, consisting of the backup folder, the name of the DataCollector and a timestamp.

returns:: a String with the filename.


METHOD:: recover
Recover the last saved backup with the same name.



METHOD:: printAll
Print all data in the collector.



METHOD:: lastBackupPath
Finds the most recently saved backup.

returns:: a String with the filename.



METHOD:: saveTo
Save the DataCollector to file.

ARGUMENT:: path
The full path to save to.

returns:: a File to which was saved.


METHOD:: collection
The SortedList of the data collected.

returns:: a SortedList

METHOD:: name
The name of the DataCollector

returns:: a String

EXAMPLES::

code::
	// create a new DataCollector:
d = DataCollector.new( "test" );
d.collection; // empty sorted list

~date = d.addData( [1,2,3] );
d.collection // now we have one entry with data in it and a timestamp

d.addMetaData( [5,6,7], ~date ); // add some metadata to it
d.collection

d.addData( [3,4.5,6] );
d.collection

// create a backup:
d.backup

// create a new collector:
e = DataCollector.new( "test" );

// recover from the backup
e.recover

// we have the same data again:
e.collection;
::