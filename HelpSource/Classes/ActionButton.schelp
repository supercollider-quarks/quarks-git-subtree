CLASS:: ActionButton
summary:: a simple button with a name and an action
categories:: Libraries>crucial>GUI
related:: Classes/SimpleButton, Classes/Button

DESCRIPTION:: Sizes itself to fit the name.  Nice, simple constructor saves fiddling around with a raw Button.

code::
(
	ActionButton(nil,"hit me",{
		"thank you".postln
	});
)

(
//   bigger title... bigger button
	ActionButton(nil,"hit me hit me hit me hit me hit me hit me hit me hit me hit me hit me hit me ",{
		"THANK YOU".postln
	});
)

::
SimpleButton in ServerTools is basically the same thing but I wanted that library to have no dependencies on crucial.


CLASSMETHODS::

METHOD:: new


argument:: layout


argument:: title


argument:: function


argument:: minWidth
to overide the auto-sizing feature

argument:: minHeight
default is GUI.skin.buttonHeight

argument:: color


argument:: backcolor


argument:: font




INSTANCEMETHODS::

METHOD:: action


argument:: f



METHOD:: init


argument:: layout


argument:: title


argument:: function


argument:: minWidth


argument:: minHeight


argument:: color


argument:: backcolor


argument:: font




EXAMPLES::

code::

(
// set minimum sizes for x and y
// longer text will still cause it to expand
ActionButton(nil,"hit me",{
	"yeah baby".postln
},200,40,Color.white,Color.black);

)



// accepting drags by setting the view.receiveDrag handler
// the list view by default gives an integer when dragging from it.
// here i am making the action button accept dragged integers.
(
Sheet({ arg f;

	a = SCListView(f,100@100);
	a.items = ["a","b","c"];

	b = ActionButton(f,"i accept integers",{
		"was hit".postln
	});
	b.view.canReceiveDragHandler = { View.currentDrag.isNumber };
	b.view.receiveDragHandler = {
		a.items[ View.currentDrag.asInteger ].postln;
	};
})
)

// here the list view is made to export a string when dragged from.
// the action button is accepting strings dragged to it.
(
Sheet({ arg f;
	a = SCListView(f,100@100);
	a.items = ["a","b","c"];
	a.beginDragAction = { arg listView;
		listView.items[ listView.value ].debug("begin dragging");
	};

	b = ActionButton(f,"i accept strings",{
		"butt hit".postln
	});
	b.view.canReceiveDrag = { View.currentDrag.isString };
	b.view.receiveDrag = {
		View.currentDrag.postln;
	};
})
)


::

