CLASS:: RedLZ77
SUMMARY:: lz77 compression/decompression
CATEGORIES:: Red>>redTools
RELATED:: Classes/RedBase64, Classes/RedHuffman, Classes/RedLZ78, Classes/RedLZSS, Classes/RedLZW, Classes/RedRLE

DESCRIPTION::
See http://michael.dipperstein.com/lzss/ and http://www.binaryessence.com/dct/en000138.htm

A dictionary look-up compressor that performs best with very long repeating patterns e.g. [0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3]. Use link::Classes/RedLZSS:: for better albeit slower compression.

NOTE::
Works with link::Classes/Integer::, link::Classes/Float:: and link::Classes/Symbol::. Can also take a link::Classes/String:: instead of an link::Classes/Array::.
::

CLASSMETHODS::

METHOD:: compress
Returns an array with length, distance and value...

METHOD:: decompress
Returns an array.

METHOD:: window
Maximum sliding window size. The default is 4096.

METHOD:: length
Maximum length for matching pattern. The default is 32.

EXAMPLES::

CODE::
a= [0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3];
b= RedLZ77.compress(a);
b.size/a.size;			//compressed to 58%
c= RedLZ77.decompress(b);
a==c


a= "AABCBBABC";			//string instead of array
b= RedLZ77.compress(a);
c= RedLZ77.decompress(b);
a==c.join;


a= "abracadabra".ascii;
b= RedLZ77.compress(a);
c= RedLZ77.decompress(b);
a==c


a= "JOEYNJOEYNJOEYJOEYNJOEYNJOEYJOEYNJOEYNJOEYJOEYNJOEYNJOEY".ascii;
b= RedLZ77.compress(a);
b.size/a.size;			//compressed to 41%
c= RedLZ77.decompress(b);
a==c


a= "Man is distinguished, not only by his reason, but by this singular passion from other animals, which is a lust of the mind, that by a perseverance of delight in the continued and indefatigable generation of knowledge, exceeds the short vehemence of any carnal pleasure.".ascii;
b= RedLZ77.compress(a);
b.size/a.size;			//expanded to 117%
c= RedLZ77.decompress(b);
c.collect{|x| x.asAscii}.join;
a==c


a= {|i| [0, 0, 0, 0.1].choose}.dup(5000);
RedLZ77.window= 512;		//decrease window and length to speed up compression
RedLZ77.length= 16;
b= RedLZ77.compress(a);		//very slow to compress large arrays
b.size/a.size;			//compressed to around 24% (20% with default window and length values)
c= RedLZ77.decompress(b);	//fast to decompress
c.size
a==c
::
